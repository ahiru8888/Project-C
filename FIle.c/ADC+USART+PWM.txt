#include "stm32f4xx.h"
#include "usart.h"	//PB6-PB7:UART1
#include "delay.h"	//delay_us/delay_ms
#include "string.h"
#include <stdlib.h>
#include <stdio.h>
#include "adc1.h"



#define ADC3_DR_ADDRESS     ((uint32_t)0x4001224C)
void TIM_PWM_Configuration(void);
void init_GPIOD(void);
void Delay_1(void);
void ADC3_CH12_DMA_Config(void);
void ADC_DMA_Config(void);

uint16_t ADC1ConvertedValue = 0, ADC3ConvertedValue = 0;
uint16_t data=0, data1=0, data2=0;
uint32_t pwm,pwm1,pwm2,pwm3;
uint8_t t=0, y=100,i=0;
char cmd[] = "Xin chao";
char buffer[100], buffer1[100];
char nhietdo[10];
char doam[10];
char anhsang[10];
float nhiet_do,do_am, anh_sang,floatdata=0,floatdata1=0, floatdata2=0;
char string1[100]= "hello from, vietnam\n";
char string2[100]= "communicate usart";
uint16_t ADCValue[3] = {0,0,0};//Stores converted vals
volatile uint16_t xx,yy,zz;


int main(void)
{
	TIM_PWM_Configuration();
	USARTx_Init(USART1, Pins_PB6PB7, 115200);	//115200
//	Adc_Init();
	ADC_DMA_Config();
	delay_init(168);
	
  while(1){

/*-----Nhan du lieu tu may tinh va cat chuoi----*/		
//		if(USART_Gets(USART1,buffer,sizeof(buffer)))
//		{
//			strcpy(nhietdo,strtok(buffer, ",")); // copy du lieu tu buffer dua vao chuoi nhietdo
//			strcpy(doam,strtok(NULL, ","));	// cat du lieu tu null toi dau ,
//			strcpy(anhsang,strtok(NULL, "\n")); // cat du lieu tu null toi \n
//			nhiet_do = atof(nhietdo); // atof la chuyen tu chuoi sang float
//			do_am = atof(doam);	// atoi la chuyen tu chuoi sang integer
//			anh_sang = atof(anhsang);
//			printf("%.1f,%.2f,%.3f",nhiet_do,do_am,anh_sang);
//			for(int a=0; a<100; a++)
//			{
//				buffer[a] = 0;
//			}
//		}
		
/*------------- Doc ADC dieu khien PWM ---------------*/		
//		ADC1ConvertedValue = Get_Adc(ADC_Channel_5);
//		data = (ADC1ConvertedValue*3.3) / 4095;
//		floatdata = ((ADC1ConvertedValue*100.0) / 4095.0);
//		sprintf(buffer1,"%.2f \r\n",floatdata); // chuyen tu so sang chuoi
//		USART_Puts(USART1,buffer1);
//		pwm = atoi(buffer1);
//		TIM4->CCR1 = pwm * 20000 / 100;
//		delay_ms(1000);
//		i+=1;

/*------ Doc ADC-DMA 3channel gui gia tri qua USART va dieu khien PWM */
		xx = ADCValue[0];
		delay_ms(10);
		yy= ADCValue[1];
		delay_ms(10);
		zz= ADCValue[2];
		delay_ms(10);
		floatdata = ((xx*100.0) / 4095.0);
		floatdata1 = ((yy*100.0) / 4095.0);
		floatdata2 = ((zz*100.0) / 4095.0);
		sprintf(buffer1,"BT1: %.2f\r\nBT2: %.2f\r\nBT3: %.2f\r\n----\r\n",floatdata,floatdata1,floatdata2);
		USART_Puts(USART1,buffer1);
		pwm1 =  (int)floatdata;
		pwm2 = (int)floatdata1;
		pwm3 =  (int)floatdata2;
		delay_ms(100);
		TIM4->CCR1 = pwm1 * 20000 / 100;
		TIM4->CCR2 = pwm2 * 20000 / 100;
		TIM4->CCR3 = pwm3 * 20000 / 100;
		TIM4->CCR4 = 100 * 20000 / 100;
		delay_ms(2000);
	}
}



void Delay_1(void) {
	//declare counter variable
 uint32_t i;
//for loop to make delay
 for(i=0; i<0xffffff; ++i) 
	{
	}
}

void TIM_PWM_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

  /* TIM4 and GPIOD clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD , ENABLE);
	/* GPIOD Configuration*/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOD, &GPIO_InitStructure); 
	/* Connect TIM4 pins to AF */
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
	
	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Prescaler = 84;
  TIM_TimeBaseStructure.TIM_Period = 19999; //20000  (SystemClock/2)/84 ||84 la Prescaler || Tao ra chu ki T =0.05s
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

  /* PWM1 Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
//  TIM_OCInitStructure.TIM_Pulse = 10 * 20000 / 100;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC1Init(TIM4, &TIM_OCInitStructure);
  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);

  /* PWM1 Mode configuration: Channel2 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
//  TIM_OCInitStructure.TIM_Pulse = 50 * 20000 / 100;
  TIM_OC2Init(TIM4, &TIM_OCInitStructure);
  TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);

  /* PWM1 Mode configuration: Channel3 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
//  TIM_OCInitStructure.TIM_Pulse = 75 * 20000 / 100;
  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);

  /* PWM1 Mode configuration: Channel4 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
//  TIM_OCInitStructure.TIM_Pulse = 100 * 20000 / 100;
  TIM_OC4Init(TIM4, &TIM_OCInitStructure);
  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);

  TIM_ARRPreloadConfig(TIM4, ENABLE);
  /* TIM3 enable counter */
  TIM_Cmd(TIM4, ENABLE);

}
void ADC_DMA_Config(void)
{
	ADC_InitTypeDef       	ADC_InitStruct;
	ADC_CommonInitTypeDef 	ADC_CommonInitStruct;
	DMA_InitTypeDef       	DMA_InitStruct;
	GPIO_InitTypeDef      	GPIO_InitStruct;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	 
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);//ADC3 is connected to the APB2 peripheral bus
	
	/* DMA2 Stream0 channel0 configuration **************************************/
	DMA_InitStruct.DMA_Channel = DMA_Channel_2;
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC3->DR;//ADC3's data register Chi dinh dia chi co so ngoai vi cho DMA
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&ADCValue;
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStruct.DMA_BufferSize = 3; // So phan tu cua mang ADCValue
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//Reads 16 bit values
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//Stores 16 bit values
	DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
	DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Enable;
	DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
	DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream0, &DMA_InitStruct);
	DMA_Cmd(DMA2_Stream0, ENABLE);
	
	/* Configure GPIO pins ******************************************************/
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;// PC0, PC1, PC2, PC3
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;//The pins are configured in analog mode
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN ;//We don't need any pull up or pull down
	GPIO_Init(GPIOC, &GPIO_InitStruct);//Initialize GPIOC pins with the configuration
	
	/* ADC Common Init **********************************************************/
	ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;
	ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	ADC_CommonInitStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStruct);
	/* ADC3 Init ****************************************************************/
	ADC_DeInit();
	ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;//Input voltage is converted into a 12bit int (max 4095)
	ADC_InitStruct.ADC_ScanConvMode = ENABLE;//The scan is configured in multiple channels
	ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;//Continuous conversion: input signal is sampled more than once
	ADC_InitStruct.ADC_ExternalTrigConv = 0;
	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;//Data converted will be shifted to right
	ADC_InitStruct.ADC_NbrOfConversion = 3;
	ADC_Init(ADC3, &ADC_InitStruct);//Initialize ADC with the configuration
	
	ADC_RegularChannelConfig(ADC3, ADC_Channel_11, 1, ADC_SampleTime_480Cycles);//PC1
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 2, ADC_SampleTime_480Cycles);//PC2
	ADC_RegularChannelConfig(ADC3, ADC_Channel_13, 3, ADC_SampleTime_480Cycles);//PC3
	
	/* Enable DMA request after last transfer (Single-ADC mode) */
	ADC_DMARequestAfterLastTransferCmd(ADC3, ENABLE);
	
	ADC_DMACmd(ADC3, ENABLE);
	ADC_Cmd(ADC3, ENABLE);
	ADC_SoftwareStartConv(ADC3);
}

void init_GPIOD(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); 

	/* GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOD, &GPIO_InitStructure);
}
