#include <stm32f4xx.h>
#include "usart.h"	//PB6-PB7UART1
#include "delay.h"	//delay_usdelay_ms
#include "string.h"
#include <stdlib.h>
#include <stdio.h>
#include "adc1.h"
#include "defines.h"
#include "tm_stm32f4_i2c.h"
#include "I2C_LCD.h"
#include "dht11.h"

#define ADDRESS  0xD0  //1101 000 0
#define BH1750 0x46
#define H_resolution 0x10 //Continuously H-resolution mode

uint8_t T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum ;
unsigned char state = 0;
char buffer[50],buf[50];
uint8_t data[7] = {00, 33, 13, 4, 6, 9, 17};
uint8_t sec, min,hour,day,date,month,year;
uint8_t e_min,Te_min,e_hour,Te_hr;
unsigned char dht11[5];
uint8_t oldTemp, oldHud;
int mode,count;
uint8_t time[15];


/**------------ I2C _ RTC + LCD ----------------------*
--------------------------------------------------------*/
void InitGPIO(void)		
{
	GPIO_InitTypeDef GPIO_InitStruct; 
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); 

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15|GPIO_Pin_14|GPIO_Pin_13|GPIO_Pin_12 ; 
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz; 
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; 
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; 
	GPIO_Init(GPIOD, &GPIO_InitStruct);  
}

uint8_t BCD2DEC(uint8_t dat)
{
	uint8_t low;
	uint8_t high;
	low = dat & 0x0F;
	high = (dat >> 4)*10;//led 7 doan 8bit(moi lan dich phai 4 bit)
	return high+low;
}
uint8_t DEC2BCD(uint8_t dat)
{
	uint8_t low;
	uint8_t high;
	low = dat%10;
	high =(dat/10)<<4;	//
	return high+low;
}
void Chuyendata(uint8_t *dat,uint8_t times)
{
	u8 i;
	for(i=0;i<times;i++)
	{
		dat[i]= DEC2BCD(dat[i]);
	}
}

void get_Dht11(void)
{
	state = get_data();
		dht11[0] = Humd_int();
		dht11[1] = Humd_float();
		dht11[2] = Temp_int();
		dht11[3] = Temp_float();
		if((dht11[0] != oldHud) || (dht11[2] != oldTemp))
		{
				
				sprintf(buffer,"H:%d.%d",dht11[0],dht11[1]);
				LCDI2C_setCursor(10,0);
				LCDI2C_write_String(buffer);
				LCDI2C_setCursor(10,1);
				sprintf(buffer,"T:%d.%d",dht11[2],dht11[3]);
				LCDI2C_write_String(buffer);
				oldHud = dht11[0];
				oldTemp = dht11[2];
		}
}

void get_RTC(void)
{
	sec =BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x00));	
	min =BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x01));
	hour = BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x02));		
	day = BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x03));		
	date = BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x04));	
	month = BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x05));		
	year = BCD2DEC(TM_I2C_Read(I2C3, ADDRESS, 0x06));
	
	time[0] = sec/10;	time[1] = sec%10;
	time[2] = min/10;	time[3] = min%10;
	time[4] = hour/10;	time[5] = hour%10;
	
	LCDI2C_setCursor(0,0);
	LCDI2C_send(time[4]+48,Rs); LCDI2C_send(time[5]+48,Rs);
	LCDI2C_send(58,Rs);
	LCDI2C_send(time[2]+48,Rs); LCDI2C_send(time[3]+48,Rs);
	LCDI2C_send(58,Rs);
	LCDI2C_send(time[0]+48,Rs); LCDI2C_send(time[1]+48,Rs);
	
	time[6] = date/10;	time[7] = date%10;
	time[8] = month/10;	time[9] = month%10;
	time[10] = year/10; time[11] = year%10;
	LCDI2C_setCursor(0,1);
	LCDI2C_send(time[6]+48,Rs); LCDI2C_send(time[7]+48,Rs);
	LCDI2C_send(47,Rs);
	LCDI2C_send(time[8]+48,Rs); LCDI2C_send(time[9]+48,Rs);
	LCDI2C_send(47,Rs);
	LCDI2C_send(time[10]+48,Rs); LCDI2C_send(time[11]+48,Rs);
	
//	LCDI2C_setCursor(0,1);
//	switch(day)
//		{
//			case 1 : LCDI2C_write_String("Su"); break;
//			case 2 : LCDI2C_write_String("Mo"); break;
//			case 3 : LCDI2C_write_String("Tu"); break;
//			case 4 : LCDI2C_write_String("We"); break;
//			case 5 : LCDI2C_write_String("Th"); break;
//			case 6 : LCDI2C_write_String("Fr"); break;
//			case 7 : LCDI2C_write_String("Sa"); break;
//		}

}

/// **** External Interrupt  *** ////
void Configure_EXT_Line0(void) 
{
	GPIO_InitTypeDef GPIO_InitStruct;
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	/* Enable clock for SYSCFG */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);	
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);	
	
	/* Tell system that you will use PC0 for EXTI_Line0 */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
	/* PD0 is connected to EXTI_Line0 */
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
	/* Enable interrupt */
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
	/* Interrupt mode */
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
	/* Triggers on rising and falling edge */
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //
	/* Add to EXTI */
	EXTI_Init(&EXTI_InitStruct);
	/* Add IRQ vector to NVIC */
	/* PD0 is connected to EXTI_Line0, which has EXTI0_IRQn vector */
	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
	/* Set priority */
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
	/* Set sub priority */
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
	/* Enable interrupt */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
}

void EXTI0_IRQHandler(void) {
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
			if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==1)
			{
				while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==1)
				delay_ms(70);
				mode+=1;
			}
			if(mode==6)
			{
				uint8_t edit_Array[15];
				min = (time[2] *10) + time[3];
				hour = (time[4] *10) + time[5];
				date = (time[6] *10) + time[7];
				month = (time[8] *10) + time[9];
				year = (time[10] *10) + time[11];
							
				edit_Array[0] = DEC2BCD(0);
				edit_Array[1] = DEC2BCD(min);
				edit_Array[2] = DEC2BCD(hour);
				edit_Array[3] = DEC2BCD(day);
				edit_Array[4] = DEC2BCD(date);
				edit_Array[5] = DEC2BCD(month);
				edit_Array[6] = DEC2BCD(year);
				TM_I2C_WriteMulti(I2C3,ADDRESS,0x00,edit_Array,7);
//				TM_I2C_Write(I2C3,0xD0,0x01,min);
//				TM_I2C_Write(I2C3,0xD0,0x02,hour);
				
				mode=0;
			}
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
    }
}
void input_GPIOC(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE); 

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ; 
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;  
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL; 
	GPIO_Init(GPIOC, &GPIO_InitStructure); 	
}

void edit_time(void)
{
	while(mode ==1) // chinh gio
	{
		while(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_5)==0)
		{
			delay_ms(50);
			time[5]++;
			if(time[5]==10)
			{
				time[5]=0; time[4]++;
			}
			if(time[4]==2 && time[5] ==5) {time[4]=0;time[5]=0;}
			LCDI2C_setCursor(0,0);
			sprintf((char*)data,"%d%d",time[4],time[5]);
			LCDI2C_write_String((char*)data);
			delay_ms(200);
		}

		LCDI2C_setCursor(0,0);
		LCDI2C_write_String("  ");
		delay_ms(200);
		LCDI2C_setCursor(0,0);
		sprintf((char*)data,"%d%d",time[4],time[5]);
		LCDI2C_write_String((char*)data);
		delay_ms(200);
	}
	while(mode ==2) // chinh phut
	{
		while(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_5)==0)
		{
			delay_ms(50);
			time[3]++;
			if(time[3]==10)
			{
				time[3]=0; time[2]++;
			}
			if(time[2]==6 && time[3] ==0) {time[2]=0;time[3]=0;}
			LCDI2C_setCursor(3,0);
			sprintf((char*)data,"%d%d",time[2],time[3]);
			LCDI2C_write_String((char*)data);
			delay_ms(200);			
		}
		LCDI2C_setCursor(3,0);
		LCDI2C_write_String("  ");
		delay_ms(200);
		LCDI2C_setCursor(3,0);
		sprintf((char*)data,"%d%d",time[2],time[3]);
		LCDI2C_write_String((char*)data);
		delay_ms(200);
	}
	while(mode ==3) // chinh ngay
	{
		while(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_5)==0)
		{
			delay_ms(50);
			time[7]++;
			if(time[7]==10)
			{
				time[7]=0; time[6]++;
			}
			if(time[6]==3 && time[7] ==2) {time[6]=0;time[7]=0;}

			LCDI2C_setCursor(0,1);
			sprintf((char*)data,"%d%d",time[6],time[7]);
			LCDI2C_write_String((char*)data);
			delay_ms(200);			
		}
		LCDI2C_setCursor(0,1);
		LCDI2C_write_String("  ");
		delay_ms(200);
		LCDI2C_setCursor(0,1);
		sprintf((char*)data,"%d%d",time[6],time[7]);
		LCDI2C_write_String((char*)data);
		delay_ms(200);
	}
	while(mode ==4) // chinh thang
	{
		while(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_5)==0)
		{
			delay_ms(50);
			time[9]++;
			if(time[9]==10)
			{
				time[9]=0; time[8]++;
			}
			if(time[8]==1 && time[9] ==3) {time[8]=0;time[9]=0;}
			LCDI2C_setCursor(3,1);
			sprintf((char*)data,"%d%d",time[8],time[9]);
			LCDI2C_write_String((char*)data);
			delay_ms(200);			
		}
		LCDI2C_setCursor(3,1);
		LCDI2C_write_String("  ");
		delay_ms(200);
		LCDI2C_setCursor(3,1);
		sprintf((char*)data,"%d%d",time[8],time[9]);
		LCDI2C_write_String((char*)data);
		delay_ms(200);
	}
	while(mode ==5) // chinh nam
	{
		while(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_5)==0)
		{
			delay_ms(50);
			time[11]++;
			if(time[11]==10)
			{
				time[11]=0; time[10]++;
			}
			if(time[10]==9 && time[11] ==9) {time[10]=0;time[11]=0;}
			LCDI2C_setCursor(6,1);
			sprintf((char*)data,"%d%d",time[10],time[11]);
			LCDI2C_write_String((char*)data);
			delay_ms(200);			
		}
		LCDI2C_setCursor(6,1);
		LCDI2C_write_String("  ");
		delay_ms(200);
		LCDI2C_setCursor(6,1);
		sprintf((char*)data,"%d%d",time[10],time[11]);
		LCDI2C_write_String((char*)data);
		delay_ms(200);
	}
}
//------------------------------------////
int main(void)
{
	SystemInit();
		InitGPIO();
	input_GPIOC();
	Configure_EXT_Line0();
	USARTx_Init(USART2, Pins_PD5PD6, 115200);
	delay_init(168);	
	TM_I2C_Init(I2C3, TM_I2C_PinsPack_1, 100000);

	/********** Write Time to RTC **********/
//	Chuyendata(data,7);	
//	TM_I2C_WriteMulti(I2C3,ADDRESS,0x00,data,7);
	
	/********** Initialize LCD_I2C **********/
	LCDI2C_Init(0x7E,16,2);
	LCDI2C_backlight(); 
	
					/* Check I2C-LCD*/	
				if(!TM_I2C_IsDeviceConnected(I2C1,LCD_ADDRESS))
				{
					GPIO_SetBits(GPIOD,GPIO_Pin_12);
					while(1);
				}
				else GPIO_SetBits(GPIOD,GPIO_Pin_13);
	
				/* Check I2C-RTC*/
				if(!TM_I2C_IsDeviceConnected(I2C3,ADDRESS))
				{
					GPIO_SetBits(GPIOD,GPIO_Pin_14);
					while(1);
				}
				else GPIO_SetBits(GPIOD,GPIO_Pin_15);
				
	 LCDI2C_clear();
	delay_ms(1000);	
  while(1)
	{
		get_Dht11();
		delay_ms(1000);
		get_RTC();
		edit_time();
	}
		
}

